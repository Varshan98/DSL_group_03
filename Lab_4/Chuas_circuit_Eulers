import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from numba import njit

# Chua's circuit parameters (you can include alpha/beta in seeding)
default_alpha = 15.6
default_beta = 28.0
m0 = -1.143
m1 = -0.714
dt = 0.01
n_steps = 10_000_000

@njit
def chua_f(x):
    return m1 * x + 0.5 * (m0 - m1) * (abs(x + 1) - abs(x - 1))

@njit
def simulate_chua(n_steps, dt, alpha, beta, x0, y0, z0):
    x, y, z = x0, y0, z0
    xs = np.empty(n_steps, dtype=np.float32)
    ys = np.empty(n_steps, dtype=np.float32)
    zs = np.empty(n_steps, dtype=np.float32)

    for i in range(n_steps):
        dx = alpha * (y - x - chua_f(x))
        dy = x - y + z
        dz = -beta * y

        x += dx * dt
        y += dy * dt
        z += dz * dt

        xs[i] = x
        ys[i] = y
        zs[i] = z

    return xs, ys, zs

def seed_to_initial_conditions(seed: int):
    # Use seed to initialize a NumPy RNG
    rng = np.random.default_rng(seed)
    x0 = rng.uniform(-1.0, 1.0)
    y0 = rng.uniform(-1.0, 1.0)
    z0 = rng.uniform(-1.0, 1.0)
    alpha = default_alpha + rng.uniform(-0.5, 0.5)  # slightly jitter Î±
    return x0, y0, z0, alpha

# ----- SET SEED HERE -----
user_seed = 23
x0, y0, z0, alpha = seed_to_initial_conditions(user_seed)
beta = default_beta

# Run simulation
xs, ys, zs = simulate_chua(n_steps, dt, alpha, beta, x0, y0, z0)

# Save phase plot (downsampled)
plt.figure(figsize=(10, 6))
plt.plot(xs[::100], zs[::100], linewidth=0.5)
plt.xlabel("x")
plt.ylabel("z")
plt.title(f"Chua's Circuit (Seed: {user_seed})")
plt.grid(True)
plt.tight_layout()
plt.show()

# Save full data to CSV
print("Saving CSV...")
df = pd.DataFrame({'x': xs, 'y': ys, 'z': zs})
df.to_csv(f'chua_rng_seed_{user_seed}.csv', index=False)
print(f"Saved as chua_rng_seed_{user_seed}.csv")

# Generate a byte stream as RNG output
rand_bytes = ((np.abs(xs) * 10000) % 256).astype(np.uint8)
with open(f'chua_rng_bytes_{user_seed}.bin', "wb") as f:
    f.write(rand_bytes.tobytes())
print(f"Random byte stream saved as chua_rng_bytes_{user_seed}.bin")
