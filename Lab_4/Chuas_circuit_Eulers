import numpy as np
from numba import njit

# Chua parameters
m0 = -1.143
m1 = -0.714
default_alpha = 15.6
default_beta = 28.0
dt = 0.005
n_steps = 100_000

@njit
def chua_f(x):
    return m1 * x + 0.5 * (m0 - m1) * (abs(x + 1) - abs(x - 1))

@njit
def simulate_chua(alpha, beta, x0, y0, z0, dt, n_steps):
    x, y, z = x0, y0, z0
    for _ in range(n_steps):
        dx = alpha * (y - x - chua_f(x))
        dy = x - y + z
        dz = -beta * y
        x += dx * dt
        y += dy * dt
        z += dz * dt
        if abs(x) > 1e4 or abs(y) > 1e4 or abs(z) > 1e4:
            break
    return x, y, z

def chua_rng_16bit(seed: int) -> int:
    rng = np.random.default_rng(seed)
    x0 = rng.uniform(-1, 1)
    y0 = rng.uniform(-1, 1)
    z0 = rng.uniform(-1, 1)
    alpha = default_alpha + rng.uniform(-0.05, 0.05)
    beta = default_beta

    x, _, _ = simulate_chua(alpha, beta, x0, y0, z0, dt, n_steps)

    # Clip x to expected range and normalize to avoid 0 or 65535
    x = np.clip(x, -20, 20)
    norm_x = (x + 20) / 40  # [0,1]
    norm_x = np.clip(norm_x, 1e-5, 1 - 1e-5)  # avoid exact 0 or 1
    rand16 = int(norm_x * 65534) + 1         # final range: [1, 65534]

    print(f"[DEBUG] Final x = {x:.6f}, normalized = {norm_x:.6f} â†’ {rand16}")
    return rand16

# Example usage
your_seed = int(input("Enter your seed: "))
print(f"ðŸŽ² 16-bit random number for seed {your_seed}: {chua_rng_16bit(your_seed)}")
